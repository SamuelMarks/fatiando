########################################
Fatiando a Terra:
  date: Tue May 29 14:42:15 2012
  version: 0.1.dev
  changeset: e5d4b5d55a4b
########################################
-----------------------------------
Testing with 1 prism and few points
-----------------------------------
Average time of 20 runs
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (50, 50)
  spacing = (dy, dx) = (204.08163265306123, 204.08163265306123)
  points = nx*ny = 2500
  z = -100
Cython: 0h 0m 0.00307s
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (50, 50)
  spacing = (dy, dx) = (204.08163265306123, 204.08163265306123)
  points = nx*ny = 2500
  z = -100
Python + Numpy: 0h 0m 0.00331s
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (50, 50)
  spacing = (dy, dx) = (204.08163265306123, 204.08163265306123)
  points = nx*ny = 2500
  z = -100
Python + Numpy + Numexpr: 0h 0m 0.00643s
RESULTS:
  Cython is 7.336950% faster than Python + Numpy
  Cython is 52.263245% faster than Python + Numpy + Numexpr
------------------------------------
Testing with 1 prism and many points
------------------------------------
Average time of 20 runs
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Cython: 0h 0m 0.26976s
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Python + Numpy: 0h 0m 0.31992s
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Python + Numpy + Numexpr: 0h 0m 0.08604s
RESULTS:
  Cython is 15.677884% faster than Python + Numpy
  Cython is -213.535461% faster than Python + Numpy + Numexpr
---------------------------------------
Testing with prism mesh and many points
---------------------------------------
Average time of 10 runs
Generating 3D right rectangular prism mesh:
  bounds = (x1, x2, y1, y2, z1, z2) = (-2000, 2000, -2000, 2000, 0, 1000)
  shape = (nz, ny, nx) = (10, 10, 10)
  number of prisms = 1000
  prism dimensions = (dx, dy, dz) = (400.0, 400.0, 100.0)
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Cython: 0h 4m 27.12031s
Generating 3D right rectangular prism mesh:
  bounds = (x1, x2, y1, y2, z1, z2) = (-2000, 2000, -2000, 2000, 0, 1000)
  shape = (nz, ny, nx) = (10, 10, 10)
  number of prisms = 1000
  prism dimensions = (dx, dy, dz) = (400.0, 400.0, 100.0)
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Python + Numpy: 0h 5m 9.97934s
Generating 3D right rectangular prism mesh:
  bounds = (x1, x2, y1, y2, z1, z2) = (-2000, 2000, -2000, 2000, 0, 1000)
  shape = (nz, ny, nx) = (10, 10, 10)
  number of prisms = 1000
  prism dimensions = (dx, dy, dz) = (400.0, 400.0, 100.0)
Generating regular grid:
  area = (x1, x2, y1, y2) = (-5000, 5000, -5000, 5000)
  shape = (ny, nx) = (500, 500)
  spacing = (dy, dx) = (20.04008016032064, 20.04008016032064)
  points = nx*ny = 250000
  z = -100
Python + Numpy + Numexpr: 0h 1m 26.82023s
RESULTS:
  Cython is 13.826413% faster than Python + Numpy
  Cython is -207.670589% faster than Python + Numpy + Numexpr
