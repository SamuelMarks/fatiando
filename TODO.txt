REFACTORING:

    * Implement equality constraints
    * Include license info in all files

General
    * Write better (or any at all) docs for the inverse problem theory
    * Make example wikis
    * Make tutorial for implementing new inversion
    * Change C code that uses arrays to Fortran
    
Inversion
    * Sparsity regularization
    * Unit tests for solvers
    * Linear solver
   
Stats
    * Implement the Chi squared test for a population
    * Implement the test for outliers in a population
    
InterG
    * IO for inversion results and initial estimate
    * Make synthetic data generation
    * Make integration test
    * Function descriptions in the docstring
    * Port to the new solvers.py
    * Make visualizations
    
PGrav
    * IO for initial estimate
    * Make integration test
    * Build sensibility concurrently
    * Check if implementing cross-derivatives is better
    * Implement depth weights
    Done:
    * Port to the new solvers.py
    * Make visualizations
    * IO for inversion results (pickle the mesh)
    
Sesimo
    * Module descriptions in the docstring
    
Simpletom:
    * Port integration tests
    * IO for initial estimate

    Done:
    * Put versbose in solve and make_mesh
    * Port to the new solvers.py
    * Make visualizations
    * Make synthetic data generatio
    * IO for inversion results (pickle the mesh)
    
Geometry
    * Discretize a sphere into prisms
    
    
Dicrect Models
    * Create wikis
    
Gravity
    * Unit tests for existing functions
    * potential and derivatives of a sphere
    * potential and derivatives of a tesseroid
    * spherical harmonics
    * reductions
    * terrain correction
    * continuation
    
    Done:    
    * Make synthetic data generation
    * Make io module with load and dump functions
    
WaveFD:
    * Port to Fortran
    * Get rid of Python interface (put it in seismo.synthetic)
    
Fullwave1D:
    * Make integration test
    * Port to the new solvers.py
    * Make visualizations
    
