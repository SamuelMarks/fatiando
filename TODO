General
    * Write README
    * Write docs for the inverse problem theory
    * Make example wikis
    * Make tutorial for implementing new inversion
    * Make integration tests out of the examples
    * Include references in the modules and functions and make automatic 
      reference generation for scripts
    * Put examples in docstrings
    
Inversion
    * Unit tests
    * Sparsity regularization
    * Use the data covariance matrix
    * Test equality constraints
    
Mesh
    * Make prism mesh with topography
    
Vis
    * Plot a bounding box around the a prism mesh
    * Docstrings for contour and contourf
   
Stats
    * Unit tests
    * Implement the Chi squared test for a population
    * Implement the test for outliers in a population
    
InterG
    * Unit tests
    * Make integration test
    * Use equality constraints
    * Doesn't work with topography because it has to match the inversion mesh
      So make a function that "interpolates" the topo into the mesh
    

GPlant
    * Separate the Jacobian columns per field when saving and loading
    * Migrar semente para centro de massa
    * Build sensibility in Fortran
    * Change Jacobian storage from zip to dir
    * Include option for weighted residuals
    * Implement adaptative learning
    * Unit tests
    * Make integration test
    * Test if the arms always grow in the direction the seeds are too close
    
PGrav
    * Use depth weights in compact inversion
    * Build sensibility in Fortran
    * IO for initial estimate
    * Unit tests
    * Make integration test
    * Use equality constraints
    
Seismo


Heat
    * Make better example script for diffusionfd1d
    * Implement implicit FD timestep
    * Implement diffusion with radiogenic heat
    * Implement diffusion with radiogenic heat and variable conductivity
    
Simpletom:
    * Unit tests
    * IO for initial estimate
    * Test equality constraints
    
Geometry
    * Discretize a sphere into prisms
    
        
Gravity
    * Program tensor invariants
    * Unit tests for existing functions
    * potential and derivatives of a sphere
    * potential and derivatives of a tesseroid
    * spherical harmonics
    * reductions
    * terrain correction
    * make extention for upward continuation
    * equivalent layer
    
WaveFD:
    * Port to Fortran
    * Get rid of Python interface (put it in seismo.synthetic)
    